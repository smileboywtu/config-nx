function pyfind() {
	find . -type f -name \*.py | xargs grep --color -n "$@"
}
function pyclean() {
	find . -name *.pyc -print -delete "$@"
}
function pf() {
	ps -ef | grep --color "$@"
}
function pycfind() {
	find . -name *.pyc -print "$@"
}
function findiip() {
	ss -ant | awk "{print $5}" | awk -F: "{print $1}" | sort | uniq -c | sort -k 1 -n -r
}
function findlf() {
	find . -type f -size +100M -exec ls -l {} \; "$@"
}
function svndm() {
	svn rm $(svn status | sed -e '/^!/!d' -e 's/^!//')
}
function pslp() {
	ps aux | sort -rnk 4
}
function df() {
	/usr/bin/df -hT "$@" | column -t
}
function rts() {
	date -d @$1
}
function ts() {
	date +%s
}
function trim_string() {
	# Usage: trim_string "   example   string    "
	: "${1#"${1%%[![:space:]]*}"}"
	: "${_%"${_##*[![:space:]]}"}"
	printf '%s\n' "$_"
}
function trim_all() {
	# Usage: trim_all "   example   string    "
	set -f
	set -- $*
	printf '%s\n' "$*"
	set +f
}
function regex() {
	# Usage: regex "string" "regex"
	[[ $1 =~ $2 ]] && printf '%s\n' "${BASH_REMATCH[1]}"
}

function is_hex_color() {
	if [[ "$1" =~ ^(#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3}))$ ]]; then
		printf '%s\n' "${BASH_REMATCH[1]}"
	else
		printf '%s\n' "error: $1 is an invalid color."
		return 1
	fi
}

function split() {
	# Usage: split "string" "delimiter"
	IFS=$'\n' read -d "" -ra arr <<<"${1//$2/$'\n'}"
	printf '%s\n' "${arr[@]}"
}

function lower() {
	# Usage: lower "string"
	printf '%s\n' "${1,,}"
}

function upper() {
	# Usage: upper "string"
	printf '%s\n' "${1^^}"
}

function trim_quotes() {
	# Usage: trim_quotes "string"
	: "${1//\'/}"
	printf '%s\n' "${_//\"/}"
}

function strip_all() {
	# Usage: strip_all "string" "pattern"
	printf '%s\n' "${1//$2/}"
}

function strip() {
	# Usage: strip "string" "pattern"
	printf '%s\n' "${1/$2/}"
}

function lstrip() {
	# Usage: lstrip "string" "pattern"
	printf '%s\n' "${1##$2}"
}

function rstrip() {
	# Usage: rstrip "string" "pattern"
	printf '%s\n' "${1%%$2}"
}

function reverse_array() {
	# Usage: reverse_array "array"
	shopt -s extdebug
	f() (printf '%s\n' "${BASH_ARGV[@]}")
	f "$@"
	shopt -u extdebug
}

function remove_array_dups() {
	# Usage: remove_array_dups "array"
	declare -A tmp_array

	for i in "$@"; do
		[[ "$i" ]] && IFS=" " tmp_array["${i:- }"]=1
	done

	printf '%s\n' "${!tmp_array[@]}"
}

function random_array_element() {
	# Usage: random_array_element "array"
	local arr=("$@")
	printf '%s\n' "${arr[RANDOM % $#]}"
}

function cycle() {
	printf '%s ' "${arr[${i:=0}]}"
	((i = i >= ${#arr[@]} - 1 ? 0 : ++i))
}

function head() {
	# Usage: head "n" "file"
	mapfile -tn "$1" line <"$2"
	printf '%s\n' "${line[@]}"
}

function tail() {
	# Usage: tail "n" "file"
	mapfile -tn 0 line <"$2"
	printf '%s\n' "${line[@]: -$1}"
}

function lines() {
	# Usage: lines "file"
	mapfile -tn 0 lines <"$1"
	printf '%s\n' "${#lines[@]}"
}

function lines_loop() {
	# Usage: lines_loop "file"
	count=0
	while IFS= read -r _; do
		((count++))
	done <"$1"
	printf '%s\n' "$count"
}

function count() {
	# Usage: count /path/to/dir/*
	#        count /path/to/dir/*/
	printf '%s\n' "$#"
}

function extract() {
	# Usage: extract file "opening marker" "closing marker"
	while IFS=$'\n' read -r line; do
		[[ "$extract" && "$line" != "$3" ]] &&
			printf '%s\n' "$line"

		[[ "$line" == "$2" ]] && extract=1
		[[ "$line" == "$3" ]] && extract=
	done <"$1"
}

function dirname() {
	# Usage: dirname "path"
	printf '%s\n' "${1%/*}/"
}

function basename() {
	# Usage: basename "path"
	: "${1%/}"
	printf '%s\n' "${_##*/}"
}

function get_term_size() {
	# Usage: get_term_size

	# (:;:) is a micro sleep to ensure the variables are
	# exported immediately.
	shopt -s checkwinsize
	(
		:
		:
	)
	printf '%s\n' "$LINES $COLUMNS"
}

function get_cursor_pos() {
	# Usage: get_cursor_pos
	IFS='[;' read -p $'\e[6n' -d R -rs _ y x _
	printf '%s\n' "$x $y"
}

function hex_to_rgb() {
	# Usage: hex_to_rgb "#FFFFFF"
	((r = 16#${1:1:2}))
	((g = 16#${1:3:2}))
	((b = 16#${1:5:6}))

	printf '%s\n' "$r $g $b"
}

function rgb_to_hex() {
	# Usage: rgb_to_hex "r" "g" "b"
	printf '#%02x%02x%02x\n' "$1" "$2" "$3"
}

function uuid() {
	# Usage: uuid
	C="89ab"

	for ((N = 0; N < 16; ++N)); do
		B="$((RANDOM % 256))"

		case "$N" in
		6) printf '4%x' "$((B % 16))" ;;
		8) printf '%c%x' "${C:$RANDOM%${#C}:1}" "$((B % 16))" ;;

		3 | 5 | 7 | 9)
			printf '%02x-' "$B"
			;;

		*)
			printf '%02x' "$B"
			;;
		esac
	done

	printf '\n'
}
